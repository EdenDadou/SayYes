name: Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout du code source
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Configuration de l'accès SSH
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.PRIVATEKEY }}

      # 3. Ajouter le VPS aux hôtes connus (évite les blocages avec StrictHostKeyChecking)
      - name: Add VPS to known hosts
        run: ssh-keyscan -p 49999 141.95.53.183 >> ~/.ssh/known_hosts

      # 4. Déploiement de l'application
      - name: Deploy application
        run: |
          ssh -o StrictHostKeyChecking=no debian@141.95.53.183 -p 49999 << 'EOF'
          set -e
          echo "🛰️ Connexion SSH réussie."
          cd /var/www/remix || { echo "❌ Échec : dossier introuvable"; exit 1; }

          echo "📦 Pull du dépôt..."
          # Sauvegarder les changements locaux s'il y en a
          git stash push -m "Auto-stash before deployment $(date)" || true
          # Forcer le pull en cas de conflit
          git fetch origin main
          git reset --hard origin/main || { echo "❌ Échec git reset"; exit 1; }

          echo "📦 Installation des dépendances..."
          # Nettoyer complètement l'environnement
          rm -rf node_modules package-lock.json yarn.lock
          npm cache clean --force
          # Régénérer le package-lock.json avec les nouvelles versions
          npm install --legacy-peer-deps || { echo "❌ Échec npm install"; exit 1; }

          echo "🗄️ Configuration de la base de données..."
          # Créer le fichier .env avec DATABASE_URL
          echo "DATABASE_URL=file:./prisma/dev.db" > .env
          echo "📋 Fichier .env créé avec DATABASE_URL"
          # Configurer aussi pour le script actuel
          export DATABASE_URL="file:./prisma/dev.db"
          echo "📋 DATABASE_URL configuré: $DATABASE_URL"

          # Vérifier le statut des migrations
          echo "📋 Vérification du statut des migrations..."
          MIGRATION_STATUS=$(npx prisma migrate status --schema=./prisma/schema.prisma 2>&1 || echo "NEEDS_MIGRATION")

          if echo "$MIGRATION_STATUS" | grep -q "Database schema is up to date"; then
            echo "✅ Base de données déjà à jour."
          else
            echo "📋 Sauvegarde de la base de données..."
            # Créer une sauvegarde avant les migrations
            if [ -f "./prisma/dev.db" ]; then
              cp ./prisma/dev.db ./prisma/dev.db.backup.$(date +%Y%m%d_%H%M%S)
              echo "✅ Sauvegarde créée."
            fi
            
            echo "📋 Application des migrations..."
            npx prisma migrate deploy || { 
              echo "❌ Échec des migrations. Tentative de génération du client..."
              npx prisma generate || { echo "❌ Échec prisma generate"; exit 1; }
              echo "✅ Client Prisma généré. Réessai des migrations..."
              npx prisma migrate deploy || { echo "❌ Échec définitif des migrations"; exit 1; }
            }
            echo "✅ Migrations appliquées avec succès."
          fi

          # Générer le client Prisma
          echo "📋 Génération du client Prisma..."
          npx prisma generate || { echo "❌ Échec prisma generate"; exit 1; }
          echo "✅ Client Prisma généré avec succès."

          echo "✅ Base de données configurée."

          echo "📁 Création des dossiers nécessaires..."
          # Créer le dossier uploads pour les médias
          mkdir -p public/uploads/portfolio
          mkdir -p public/uploads/portfolio/bento
          chmod 755 public/uploads -R || true

          # Créer le dossier logs pour PM2
          mkdir -p logs
          chmod 755 logs || true

          echo "✅ Dossiers créés."

          echo "🏗️ Build de l'application..."
          echo "📋 Démarrage du build (cela peut prendre quelques minutes)..."
          # S'assurer que DATABASE_URL est disponible pour le build
          export DATABASE_URL="file:./prisma/dev.db"
          timeout 300 npm run build || { echo "❌ Échec npm build (timeout ou erreur)"; exit 1; }
          echo "✅ Build terminé avec succès."

          echo "🚀 Redémarrage de l'application via PM2..."
          pm2 restart remix-app || { echo "❌ Échec PM2 restart"; exit 1; }

          echo "✅ Déploiement terminé avec succès."
          EOF
